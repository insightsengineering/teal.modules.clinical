% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_t_events.R
\name{tm_t_events}
\alias{tm_t_events}
\title{Teal Module: Events by Term}
\usage{
tm_t_events(
  label,
  dataname,
  parentname = ifelse(inherits(arm_var, "data_extract_spec"),
    teal.transform::datanames_input(arm_var), "ADSL"),
  arm_var,
  hlt,
  llt,
  add_total = TRUE,
  total_label = "All Patients",
  event_type = "event",
  sort_criteria = c("freq_desc", "alpha"),
  prune_freq = 0,
  prune_diff = 0,
  drop_arm_levels = TRUE,
  pre_output = NULL,
  post_output = NULL,
  basic_table_args = teal.widgets::basic_table_args()
)
}
\arguments{
\item{label}{(\code{character})\cr
menu item label of the module in the teal app.}

\item{dataname}{(\code{character})\cr
analysis data used in teal module.}

\item{parentname}{(\code{character})\cr
parent analysis data used in teal module, usually this refers to \code{ADSL}.}

\item{arm_var}{(\code{choices_selected} or \code{data_extract_spec})\cr
object with all available choices
and preselected option for variable names that can be used as \code{arm_var}.
It defines the grouping variable(s) in the results table.
If there are two elements selected for \code{arm_var},
second variable will be nested under the first variable.}

\item{hlt}{(\code{choices_selected} or \code{data_extract_spec})\cr
name of the variable with high level term for events.}

\item{llt}{(\code{choices_selected} or \code{data_extract_spec})\cr
name of the variable with low level term for events.}

\item{add_total}{(\code{logical})\cr
whether to include column with total number of patients.}

\item{total_label}{(\code{string})\cr string to display as total column/row label if column/row is
enabled (see \code{add_total}).}

\item{event_type}{(\code{character})\cr type of event that is summarized (e.g. adverse event, treatment).
Default is "event".}

\item{sort_criteria}{(\code{character})\cr how to sort the final table. Default option \code{freq_desc} sorts
by decreasing total number of patients with event. Alternative option \code{alpha} sorts events
alphabetically.}

\item{prune_freq}{(\code{number})\cr threshold to use for trimming table using event incidence rate in any column.}

\item{prune_diff}{(\code{number})\cr threshold to use for trimming table using as criteria difference in
rates between any two columns.}

\item{drop_arm_levels}{(\code{logical})\cr drop the unused \code{arm_var} levels.
When \code{TRUE}, \code{arm_var} levels are set to those used in the \code{dataname} dataset. When \code{FALSE},
\code{arm_var} levels are set to those used in the \code{parantname} dataset.}

\item{pre_output}{optional, (\code{shiny.tag})\cr
with text placed before the output to put the output into context.
For example a title.}

\item{post_output}{optional, (\code{shiny.tag})\cr
with text placed after the output to put the output into context. For example
the \code{\link[shiny:helpText]{shiny::helpText()}} elements are useful.}

\item{basic_table_args}{optional, (\code{basic_table_args})\cr
object created by \code{\link[teal.widgets:basic_table_args]{teal.widgets::basic_table_args()}} with settings for the module table.
The argument is merged with option \code{teal.basic_table_args} and with default module arguments
(hard coded in the module body).

For more details, see the vignette: \code{vignette("custom-basic-table-arguments", package = "teal.widgets")}.}
}
\description{
Teal Module: Events by Term
}
\examples{
adsl <- tmc_ex_adsl
adae <- tmc_ex_adae

app <- teal::init(
  data = cdisc_data(
    cdisc_dataset("ADSL", adsl),
    cdisc_dataset("ADAE", adae)
  ),
  modules = modules(
    tm_t_events(
      label = "Adverse Event Table",
      dataname = "ADAE",
      arm_var = choices_selected(c("ARM", "ARMCD"), "ARM"),
      llt = choices_selected(
        choices = variable_choices(adae, c("AETERM", "AEDECOD")),
        selected = c("AEDECOD")
      ),
      hlt = choices_selected(
        choices = variable_choices(adae, c("AEBODSYS", "AESOC")),
        selected = "AEBODSYS"
      ),
      add_total = TRUE,
      event_type = "adverse event"
    )
  )
)
if (interactive()) {
  shinyApp(app$ui, app$server)
}

}
