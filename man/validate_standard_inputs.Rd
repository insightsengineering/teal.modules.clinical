% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validate_standard_inputs.R
\name{validate_standard_inputs}
\alias{validate_standard_inputs}
\title{Validate standard input values for a teal module}
\usage{
validate_standard_inputs(
  adsl,
  adslvars = character(0),
  anl,
  anlvars = character(0),
  need_arm = TRUE,
  arm_var,
  ref_arm,
  comp_arm,
  min_n_levels_armvar = 1L,
  max_n_levels_armvar = 100L,
  min_nrow = 1
)
}
\arguments{
\item{adsl}{data.frame with subject-level data}

\item{adslvars}{required variables from \code{ADSL}}

\item{anl}{data.frame with analysis data}

\item{anlvars}{required variables from \code{ANL}}

\item{need_arm}{flag indicating whether grouping variable \code{arm_var}
is required or can be optionally \code{NULL}.}

\item{arm_var}{character with name of grouping variable, typically arm}

\item{ref_arm}{character with name of reference level in \code{arm_var}}

\item{comp_arm}{character with name for comparison level in \code{arm_var}}

\item{min_n_levels_armvar}{minimum number of levels in grouping variable \code{arm_var}.
Defaults to 1, \code{NULL} for no minimum.}

\item{max_n_levels_armvar}{maximum number of levels in grouping variable \code{arm_var}.
Use \code{NULL} for no maximum.}

\item{min_nrow}{minimum number of observations in \code{ADSL} and \code{ANL}}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}
}
\examples{
# Internal function - validate_standard_inputs

adsl <- tmc_ex_adsl
adae <- tmc_ex_adae

ui <- fluidPage(
  shiny::sliderInput("obs", "Max Age",
    min = 0, max = 100, value = 100
  ),
  shiny::sliderInput("maxgr", "Max Grade",
    min = 0, max = 5, value = 5
  ),
  plotOutput("plot")
)

server <- function(input, output) {
  output$plot <- renderPlot({
    keep_adsl <- c("USUBJID", "STUDYID", "ARMCD", "AGE", "ARM")
    keep_adae <- c("USUBJID", "STUDYID", "AETOXGR")

    adsl_f <- adsl[adsl$AGE <= input$obs, keep_adsl]
    adae_f <- adae[as.numeric(adae$AETOXGR) <= input$maxgr, keep_adae]

    teal.modules.clinical:::validate_standard_inputs(
      adsl = adsl_f,
      adslvars = keep_adsl,
      anl = adae_f,
      anlvars = keep_adae,
      arm_var = "ARM",
      need_arm = TRUE
    )

    ANL <- merge(adsl_f, adae_f, by = c("USUBJID", "STUDYID"))

    plot(ANL$AGE, jitter(as.numeric(ANL$AETOXGR)), xlab = "AGE", ylab = "AETOXGR")
  })
}
if (interactive()) {
  shinyApp(ui, server)
}

server2 <- function(input, output) {
  output$plot <- renderPlot({
    keep_adsl <- c("USUBJID", "STUDYID", "ARMCD", "AGE", "ARM")
    keep_adae <- c("USUBJID", "STUDYID", "AETOXGR")

    adsl_f <- adsl[adsl$AGE <= input$obs, keep_adsl]
    adae_f <- adae[as.numeric(adae$AETOXGR) <= input$maxgr, keep_adae]

    teal.modules.clinical:::validate_standard_inputs(
      adsl = adsl_f,
      adslvars = keep_adsl,
      anl = adae_f,
      anlvars = keep_adae,
      arm_var = NULL,
      need_arm = FALSE
    )

    ANL <- merge(adsl_f, adae_f, by = c("USUBJID", "STUDYID"))

    plot(ANL$AGE, jitter(as.numeric(ANL$AETOXGR)), xlab = "AGE", ylab = "AETOXGR")
  })
}
if (interactive()) {
  shinyApp(ui, server2)
}

server3 <- function(input, output) {
  output$plot <- renderPlot({
    keep_adsl <- c("USUBJID", "STUDYID", "ARMCD", "AGE", "ARM")
    keep_adae <- c("USUBJID", "STUDYID", "AETOXGR")

    adsl_f <- adsl[adsl$AGE <= input$obs, keep_adsl]
    adae_f <- adae[as.numeric(adae$AETOXGR) <= input$maxgr, keep_adae]

    teal.modules.clinical:::validate_standard_inputs(
      adsl = adsl_f,
      adslvars = keep_adsl,
      anl = adae_f,
      anlvars = keep_adae,
      arm_var = "HELLO",
      need_arm = FALSE
    )

    ANL <- merge(adsl_f, adae_f, by = c("USUBJID", "STUDYID"))

    plot(ANL$AGE, jitter(as.numeric(ANL$AETOXGR)), xlab = "AGE", ylab = "AETOXGR")
  })
}
if (interactive()) {
  shinyApp(ui, server3)
}

}
\keyword{internal}
