% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_g_barchart_simple.R
\name{tm_g_barchart_simple}
\alias{tm_g_barchart_simple}
\title{teal Module: Simple Bar Chart and Table of Counts per Category}
\usage{
tm_g_barchart_simple(
  x = NULL,
  fill = NULL,
  x_facet = NULL,
  y_facet = NULL,
  label = "Count Barchart",
  plot_options = NULL,
  plot_height = c(600L, 200L, 2000L),
  plot_width = NULL,
  pre_output = NULL,
  post_output = NULL,
  ggplot2_args = teal.widgets::ggplot2_args()
)
}
\arguments{
\item{x}{(\code{data_extract_spec})\cr variable on the x-axis.}

\item{fill}{(\code{data_extract_spec})\cr grouping variable to determine bar colors.}

\item{x_facet}{(\code{data_extract_spec})\cr row-wise faceting groups.}

\item{y_facet}{(\code{data_extract_spec})\cr column-wise faceting groups.}

\item{label}{(\code{character})\cr menu item label of the module in the teal app.}

\item{plot_options}{(\code{list})\cr list of plot options.}

\item{plot_height}{(\code{numeric}) optional\cr vector of length three with \code{c(value, min, max)}. Specifies the
height of the main plot and renders a slider on the plot to interactively adjust the plot height.}

\item{plot_width}{(\code{numeric}) optional\cr vector of length three with \code{c(value, min, max)}. Specifies the width
of the main plot and renders a slider on the plot to interactively adjust the plot width.}

\item{pre_output}{(\code{shiny.tag}) optional,\cr with text placed before the output to put the output into context.
For example a title.}

\item{post_output}{(\code{shiny.tag}) optional,\cr with text placed after the output to put the output into context.
For example the \code{\link[shiny:helpText]{shiny::helpText()}} elements are useful.}

\item{ggplot2_args}{(\code{ggplot2_args}) optional\cr object created by \code{\link[teal.widgets:ggplot2_args]{teal.widgets::ggplot2_args()}} with settings
for the module plot. The argument is merged with option \code{teal.ggplot2_args} and with default module arguments
(hard coded in the module body).
For more details, see the vignette: \code{vignette("custom-ggplot2-arguments", package = "teal.widgets")}.}
}
\value{
a \code{teal_module} object.
}
\description{
This module produces a \code{\link[ggplot2:ggplot]{ggplot2::ggplot()}} type bar chart and summary table of counts per category.
}
\details{
Categories can be defined up to four levels deep and are defined through the \code{x}, \code{fill},
\code{x_facet}, and \code{y_facet} parameters. Any parameters set to \code{NULL} (default) are ignored.
}
\examples{
library(nestcolor)
library(dplyr)

data <- teal_data()
data <- within(data, {
  ADSL <- tmc_ex_adsl \%>\%
    mutate(ITTFL = factor("Y") \%>\%
      with_label("Intent-To-Treat Population Flag"))
  ADAE <- tmc_ex_adae \%>\%
    filter(!((AETOXGR == 1) & (AESEV == "MILD") & (ARM == "A: Drug X")))
})
join_keys(data) <- default_cdisc_join_keys[ls(data)]

ADSL <- data[["ADSL"]]
ADAE <- data[["ADAE"]]

app <- init(
  data = data,
  modules = modules(
    tm_g_barchart_simple(
      label = "ADAE Analysis",
      x = data_extract_spec(
        dataname = "ADSL",
        select = select_spec(
          choices = variable_choices(
            ADSL,
            c(
              "ARM", "ACTARM", "SEX",
              "RACE", "ITTFL", "SAFFL", "STRATA2"
            )
          ),
          selected = "ACTARM",
          multiple = FALSE
        )
      ),
      fill = list(
        data_extract_spec(
          dataname = "ADSL",
          select = select_spec(
            choices = variable_choices(
              ADSL,
              c(
                "ARM", "ACTARM", "SEX",
                "RACE", "ITTFL", "SAFFL", "STRATA2"
              )
            ),
            selected = "SEX",
            multiple = FALSE
          )
        ),
        data_extract_spec(
          dataname = "ADAE",
          select = select_spec(
            choices = variable_choices(ADAE, c("AETOXGR", "AESEV", "AESER")),
            selected = NULL,
            multiple = FALSE
          )
        )
      ),
      x_facet = list(
        data_extract_spec(
          dataname = "ADAE",
          select = select_spec(
            choices = variable_choices(ADAE, c("AETOXGR", "AESEV", "AESER")),
            selected = "AETOXGR",
            multiple = FALSE
          )
        ),
        data_extract_spec(
          dataname = "ADSL",
          select = select_spec(
            choices = variable_choices(
              ADSL,
              c(
                "ARM", "ACTARM", "SEX",
                "RACE", "ITTFL", "SAFFL", "STRATA2"
              )
            ),
            selected = NULL,
            multiple = FALSE
          )
        )
      ),
      y_facet = list(
        data_extract_spec(
          dataname = "ADAE",
          select = select_spec(
            choices = variable_choices(ADAE, c("AETOXGR", "AESEV", "AESER")),
            selected = "AESEV",
            multiple = FALSE
          )
        ),
        data_extract_spec(
          dataname = "ADSL",
          select = select_spec(
            choices = variable_choices(
              ADSL,
              c(
                "ARM", "ACTARM", "SEX",
                "RACE", "ITTFL", "SAFFL", "STRATA2"
              )
            ),
            selected = NULL,
            multiple = FALSE
          )
        )
      )
    )
  )
)
if (interactive()) {
  shinyApp(app$ui, app$server)
}

}
\seealso{
The \href{https://insightsengineering.github.io/tlg-catalog/stable/}{TLG Catalog} where additional example
apps implementing this module can be found.
}
\section{Examples in Shinylive}{
\describe{
  \item{example-1}{
    \href{https://shinylive.io/r/app/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKcqajGIgEwCu1OAGcMBOhFoFuASgA60snGYFStAG5wABAB4AtDoBmgiOtol2cnQBUsAVQCiSpXSYsOEMaWLUijIoQ7sxs7Pyo1KyBrhD8UKRQ+kZc1AD68YnWSplJhjoA7rSkABa0EOEJULg6IEo6OgCCACIAygAyyTqkMARpcAAeaVD8otQ6AKQAfBP1DTowgonk7ACStrYAYp0AvCZQ6gHsCmAAmic207MQ8-NFpWnUUPRw1MdgqypkBrZEP4xwBI6AAKRFQwgSlhumyeAHMLkEGi1Gk4uj0+oNhvFdFc5g1jLRqORGOwAITsdgo2wAeQAGgBxLA6HZ7ACMNgAZDpKU5Wk4AGrMvYnACyq3azQuOi5lKwIqFOhOjUQOmajEEsJ0tIRQQAvkEAFZEcppADWcFYokqiRs+X4cGMUGEpDSBH4tFEfSNJvNluA1CtuTkAF1Yi0Ol1csBgEq2u0TsHQxBkai7VVo7GUQmk0o0KguuViscbjpcszS1VcHM+EIRKJyzXhGJi7cemlYWl6CwCCUWC7RLQYJE4C3bjoni9xsKwCmmtAogPRCcqyXbgNy7l+gNSGp+6g4ARR2OK4loPBy7GOsu8WPRK8D6Ry3eROo0qJ94eb8ee8aCGJy5oLC0M8IiuiUv7Nl+x5NHGK7QWOn6rvB8xKnKy6KjOADCtiNGheAYXy2p4FB8EnFgjSYS4+EnOsWzxtRYCtI0mzbOhJytPYjQ4QATCcJFjoiyFyHByHPg+cD8BeWE4XhInwYsRK0MO5abI07R8vxgm3MJUEEtQU7jh6pBHmOm6DDuBx7geJnHrkZ66NO4b0XJ0FieoT73q+77Wfxtw-jI-57IBjDAfQoH+X+Vq+WOTkuchOiIfFx6oSKbHSbhqUMYR15IUlGHkZRaW0axWXMSVNTsZxPF8blQnRQ0Om1cebnkJJ07ZcRTVjgpGjKXsqnqS4XUNZpcXzGZ267m+H42aZVT2VJKY5fFLUeS+VmJUlEWBTowWheF4EBVaKY1J+M5ODSDJYGlKJ8vyN28k411gHIjV5S1EnlgAcg47TtGNx49UpIgqWpGnDToWkCVBb1jkMjp-o+ex0KIxn8RNFleTN0V2bADkYUtnUrZ5SM6C100+RDDTbfWQVASBcBgRBx3NCip3vFSdKMg9d0809CIA7eJOfY5F1c89gu3EDfU6AN4PxVD2mCxjU3eZt8G4+ejlxstokk2tD4U+ryE0wB9NhYzNOzfBsX1fMxt5SlN3YRlaUdZL0FkRRVEVR8GzlQRZXOQRVWNLxYB2yNVOQx7DQfW1Og-X9scLM6wP43LQ0K5pMNjawaQI3ApMo2jXUq5ZRvW+N8144trM+9Fq17OTatV35h2RWbIUM0zR2UvX7NKmLV18-dDG3fzL2w8T60iwTj1jyn0sg-1YNZ3VXXT3NiRbpjG1tyeUALdrV5E3r60G1jlN5abdPdxbveRQfty29H1PP2OTvjy7skEU4REp1uF7QqDFirB3YkHN2odw6R0hnbLe8F47fV+v9O2y8M5r2ioreY2CoaCSCEEWgxhuTlGJJZLQI5Xq1DmKIMoEBWCNHQOwPMAASQQtAaisLvIwbQMQIC6iUGAXUwYgA}{Open in Shinylive}
    \if{html}{\out{<script type="text/javascript">$(function() {  var if_pkgdown = [...document.scripts].filter(x => x.src.includes("pkgdown.js")).length > 0;  if (if_pkgdown) {    $("iframe.iframe_shinylive").css("width", "150\%");  }});</script>}}
    \if{html}{\out{<iframe class="iframe_shinylive" src="https://shinylive.io/r/app/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKcqajGIgEwCu1OAGcMBOhFoFuASgA60snGYFStAG5wABAB4AtDoBmgiOtol2cnQBUsAVQCiSpXSYsOEMaWLUijIoQ7sxs7Pyo1KyBrhD8UKRQ+kZc1AD68YnWSplJhjoA7rSkABa0EOEJULg6IEo6OgCCACIAygAyyTqkMARpcAAeaVD8otQ6AKQAfBP1DTowgonk7ACStrYAYp0AvCZQ6gHsCmAAmic207MQ8-NFpWnUUPRw1MdgqypkBrZEP4xwBI6AAKRFQwgSlhumyeAHMLkEGi1Gk4uj0+oNhvFdFc5g1jLRqORGOwAITsdgo2wAeQAGgBxLA6HZ7ACMNgAZDpKU5Wk4AGrMvYnACyq3azQuOi5lKwIqFOhOjUQOmajEEsJ0tIRQQAvkEAFZEcppADWcFYokqiRs+X4cGMUGEpDSBH4tFEfSNJvNluA1CtuTkAF1Yi0Ol1csBgEq2u0TsHQxBkai7VVo7GUQmk0o0KguuViscbjpcszS1VcHM+EIRKJyzXhGJi7cemlYWl6CwCCUWC7RLQYJE4C3bjoni9xsKwCmmtAogPRCcqyXbgNy7l+gNSGp+6g4ARR2OK4loPBy7GOsu8WPRK8D6Ry3eROo0qJ94eb8ee8aCGJy5oLC0M8IiuiUv7Nl+x5NHGK7QWOn6rvB8xKnKy6KjOADCtiNGheAYXy2p4FB8EnFgjSYS4+EnOsWzxtRYCtI0mzbOhJytPYjQ4QATCcJFjoiyFyHByHPg+cD8BeWE4XhInwYsRK0MO5abI07R8vxgm3MJUEEtQU7jh6pBHmOm6DDuBx7geJnHrkZ66NO4b0XJ0FieoT73q+77Wfxtw-jI-57IBjDAfQoH+X+Vq+WOTkuchOiIfFx6oSKbHSbhqUMYR15IUlGHkZRaW0axWXMSVNTsZxPF8blQnRQ0Om1cebnkJJ07ZcRTVjgpGjKXsqnqS4XUNZpcXzGZ267m+H42aZVT2VJKY5fFLUeS+VmJUlEWBTowWheF4EBVaKY1J+M5ODSDJYGlKJ8vyN28k411gHIjV5S1EnlgAcg47TtGNx49UpIgqWpGnDToWkCVBb1jkMjp-o+ex0KIxn8RNFleTN0V2bADkYUtnUrZ5SM6C100+RDDTbfWQVASBcBgRBx3NCip3vFSdKMg9d0809CIA7eJOfY5F1c89gu3EDfU6AN4PxVD2mCxjU3eZt8G4+ejlxstokk2tD4U+ryE0wB9NhYzNOzfBsX1fMxt5SlN3YRlaUdZL0FkRRVEVR8GzlQRZXOQRVWNLxYB2yNVOQx7DQfW1Og-X9scLM6wP43LQ0K5pMNjawaQI3ApMo2jXUq5ZRvW+N8144trM+9Fq17OTatV35h2RWbIUM0zR2UvX7NKmLV18-dDG3fzL2w8T60iwTj1jyn0sg-1YNZ3VXXT3NiRbpjG1tyeUALdrV5E3r60G1jlN5abdPdxbveRQfty29H1PP2OTvjy7skEU4REp1uF7QqDFirB3YkHN2odw6R0hnbLe8F47fV+v9O2y8M5r2ioreY2CoaCSCEEWgxhuTlGJJZLQI5Xq1DmKIMoEBWCNHQOwPMAASQQtAaisLvIwbQMQIC6iUGAXUwYgA" style="height: 800px; width: 100\%; border: 1px solid rgba(0,0,0,0.175); border-radius: .375rem; position: relative; z-index: 1"></iframe>}}
  }
}
}

