% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_g_barchart_simple.R
\name{tm_g_barchart_simple}
\alias{tm_g_barchart_simple}
\title{teal Module: Simple Bar Chart and Table of Counts per Category}
\usage{
tm_g_barchart_simple(
  x = NULL,
  fill = NULL,
  x_facet = NULL,
  y_facet = NULL,
  label = "Count Barchart",
  plot_options = NULL,
  plot_height = c(600L, 200L, 2000L),
  plot_width = NULL,
  pre_output = NULL,
  post_output = NULL,
  ggplot2_args = teal.widgets::ggplot2_args(),
  transformators = list(),
  decorators = list()
)
}
\arguments{
\item{x}{(\code{data_extract_spec})\cr variable on the x-axis.}

\item{fill}{(\code{data_extract_spec})\cr grouping variable to determine bar colors.}

\item{x_facet}{(\code{data_extract_spec})\cr row-wise faceting groups.}

\item{y_facet}{(\code{data_extract_spec})\cr column-wise faceting groups.}

\item{label}{(\code{character})\cr menu item label of the module in the teal app.}

\item{plot_options}{(\code{list})\cr list of plot options.}

\item{plot_height}{(\code{numeric}) optional\cr vector of length three with \code{c(value, min, max)}. Specifies the
height of the main plot and renders a slider on the plot to interactively adjust the plot height.}

\item{plot_width}{(\code{numeric}) optional\cr vector of length three with \code{c(value, min, max)}. Specifies the width
of the main plot and renders a slider on the plot to interactively adjust the plot width.}

\item{pre_output}{(\code{shiny.tag}) optional,\cr with text placed before the output to put the output into context.
For example a title.}

\item{post_output}{(\code{shiny.tag}) optional,\cr with text placed after the output to put the output into context.
For example the \code{\link[shiny:helpText]{shiny::helpText()}} elements are useful.}

\item{ggplot2_args}{(\code{ggplot2_args}) optional\cr object created by \code{\link[teal.widgets:ggplot2_args]{teal.widgets::ggplot2_args()}} with settings
for the module plot. The argument is merged with option \code{teal.ggplot2_args} and with default module arguments
(hard coded in the module body).
For more details, see the vignette: \code{vignette("custom-ggplot2-arguments", package = "teal.widgets")}.}

\item{transformators}{(\code{list} of \code{teal_transform_module}) that will be applied to transform module's data input.
To learn more check \code{vignette("transform-input-data", package = "teal")}.}

\item{decorators}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
(named \code{list} of lists of \code{teal_transform_module}) optional,
decorator for tables or plots included in the module output reported.
The decorators are applied to the respective output objects.

See section "Decorating Module" below for more details.}
}
\value{
a \code{teal_module} object.
}
\description{
This module produces a \code{\link[ggplot2:ggplot]{ggplot2::ggplot()}} type bar chart and summary table of counts per category.
}
\details{
Categories can be defined up to four levels deep and are defined through the \code{x}, \code{fill},
\code{x_facet}, and \code{y_facet} parameters. Any parameters set to \code{NULL} (default) are ignored.
}
\section{Decorating Module}{


This module generates the following objects, which can be modified in place using decorators:
\itemize{
\item \code{plot} (\code{ggplot})
}

A Decorator is applied to the specific output using a named list of \code{teal_transform_module} objects.
The name of this list corresponds to the name of the output to which the decorator is applied.
See code snippet below:

\if{html}{\out{<div class="sourceCode">}}\preformatted{tm_g_barchart_simple(
   ..., # arguments for module
   decorators = list(
     plot = teal_transform_module(...) # applied only to `plot` output
   )
)
}\if{html}{\out{</div>}}

For additional details and examples of decorators, refer to the vignette
\code{vignette("decorate-module-output", package = "teal.modules.clinical")}.

To learn more please refer to the vignette
\code{vignette("transform-module-output", package = "teal")} or the \code{\link[teal:teal_transform_module]{teal::teal_transform_module()}} documentation.
}

\examples{
library(nestcolor)

data <- teal_data()
data <- within(data, {
  library(dplyr)
  ADSL <- teal.modules.clinical::tmc_ex_adsl \%>\%
    mutate(ITTFL = factor("Y") \%>\%
      formatters::with_label("Intent-To-Treat Population Flag"))
  ADAE <- teal.modules.clinical::tmc_ex_adae \%>\%
    filter(!((AETOXGR == 1) & (AESEV == "MILD") & (ARM == "A: Drug X")))
})
join_keys(data) <- default_cdisc_join_keys[names(data)]

ADSL <- data[["ADSL"]]
ADAE <- data[["ADAE"]]

app <- init(
  data = data,
  modules = modules(
    tm_g_barchart_simple(
      label = "ADAE Analysis",
      x = data_extract_spec(
        dataname = "ADSL",
        select = select_spec(
          choices = variable_choices(
            ADSL,
            c(
              "ARM", "ACTARM", "SEX",
              "RACE", "ITTFL", "SAFFL", "STRATA2"
            )
          ),
          selected = "ACTARM",
          multiple = FALSE
        )
      ),
      fill = list(
        data_extract_spec(
          dataname = "ADSL",
          select = select_spec(
            choices = variable_choices(
              ADSL,
              c(
                "ARM", "ACTARM", "SEX",
                "RACE", "ITTFL", "SAFFL", "STRATA2"
              )
            ),
            selected = "SEX",
            multiple = FALSE
          )
        ),
        data_extract_spec(
          dataname = "ADAE",
          select = select_spec(
            choices = variable_choices(ADAE, c("AETOXGR", "AESEV", "AESER")),
            selected = NULL,
            multiple = FALSE
          )
        )
      ),
      x_facet = list(
        data_extract_spec(
          dataname = "ADAE",
          select = select_spec(
            choices = variable_choices(ADAE, c("AETOXGR", "AESEV", "AESER")),
            selected = "AETOXGR",
            multiple = FALSE
          )
        ),
        data_extract_spec(
          dataname = "ADSL",
          select = select_spec(
            choices = variable_choices(
              ADSL,
              c(
                "ARM", "ACTARM", "SEX",
                "RACE", "ITTFL", "SAFFL", "STRATA2"
              )
            ),
            selected = NULL,
            multiple = FALSE
          )
        )
      ),
      y_facet = list(
        data_extract_spec(
          dataname = "ADAE",
          select = select_spec(
            choices = variable_choices(ADAE, c("AETOXGR", "AESEV", "AESER")),
            selected = "AESEV",
            multiple = FALSE
          )
        ),
        data_extract_spec(
          dataname = "ADSL",
          select = select_spec(
            choices = variable_choices(
              ADSL,
              c(
                "ARM", "ACTARM", "SEX",
                "RACE", "ITTFL", "SAFFL", "STRATA2"
              )
            ),
            selected = NULL,
            multiple = FALSE
          )
        )
      )
    )
  )
)
if (interactive()) {
  shinyApp(app$ui, app$server)
}

}
\seealso{
The \href{https://insightsengineering.github.io/tlg-catalog/stable/}{TLG Catalog} where additional example
apps implementing this module can be found.
}
\section{Examples in Shinylive}{
\describe{
  \item{example-1}{
    \href{https://shinylive.io/r/app/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKcqajGIgEwCu1OAGcMBOhFoFuASgA60snGYFStAG5wABAB4AtDoBmgiOtol2cnQBUsAVQCiSpXSYsOEMaWLUijIoQSvxQpFD6RlzUAPqh4dYhYRGGOgDutKQAFrQQ7PFQuDogSjo67sxs+ajUrIGlOgCCACIAygAykTrRvALCYhJSMtyIiKQwBDFwAB4xUPyi1DoApAB8yw1lMILh5OwAkra2AGKdALwmUOoB7ApgAJp3NmsbEGXvJgEwYeSMoqMZbIxahQehwai3MD7FRkAy2IhwxhwMI6AAKRFQwjCljexxBAHMnkEyi1Gk4uj0+EIROJJLlhtRRuNJjM5qFdC9NiZaNRfuwAITsdhk2wAeQAGgBxLA6M4XACMNgAZDphU5Wk4AGqyi53ACy+3azSeOhVwqwep1OjujUQOmajEE+J04qJQQAvkEAFZEXIxADWcFYonyyRsqX4cGMUGEpBiBH4tFEkx9fsDweA0HgIYKcgAuq4IC0Ol0CsBgDa2u07nmC0XmmTS8ly5WyTW60o0KguvTSLc3joCrLB8lcA0qf1RMOJzT+x9xjF8TF6CwCFkWHHRLQYDU4HOPuVQeDh63yY1oLUt6I7mOBx9psOClNpqQ1JvUHACPuDyPwlndLqYDFtWeBch8ojgp+pDDhBIjqDEogfl+YEHmuvoEGIw6aCwtCgiI8ZZOhYjfj+7zAbepGoSRlFlDaFo3taQEAMK2I09F4IxGquqBd40bRYBYI0TEuBxdyHCcIFFHcrSNMcpwMdJ9iNKxABMdwoT+xI0XIFE0bBUFwPwJ7Max7G6ZR2y8rQu7DscjTtBqGk6FpHw6Shxg8ksFx0KIfZOU+Myvlc76ftRB4FP+xnATeTllPp6gwZB8GIaFsXvGhMiYRc2GMLh9D4RlGEhmlHzkSV6VhXxdF6gpJlsTVolgFxMW8Xx-GCcJtXifJjUyXJkmcUpqnqa12nlW5o0-vF5BGYBzU8W1OiWRoNkXHZDkuJN7wuQeE2UQFL5vghSGVe8EWwABjGkiJ5mkdNiVwSFyFbR8hVZToOV5QVhGZSG11FMhQFOGKUpYLVZIapq4Pqk4YNgHIe1tdNhnDgAcg47TtLdFmxtZIi2fZjkvc5Tk7WUiP3jE0YYdB3lJn5W0HUFyUnWl53wFFDY3Wl90XNNx2pcTZRvVO2U4XhcAEURf1cwDkIihK0rQ5Dyuw0S2N3UlM1RcDitwxrP7LXjl3rUTfFk9tBu-lAz7M09p1lOzl2Vh0LV8bzOj8ylz2LSLWHi-lksiw7B5lULFXlR81Xgyx9W1fNVuUXcHU3Yx3UDdJsk9VJTVDY0algJHJPhxTelayjFzo5jifvEbq06Kbm3m6TKGl2UrBU1ccC0+U9OnUzR3eyHTuc22C1l49D1QQLPttX7Yu5RLUu-cKss6IDCug6rUONRDavw23muPRXV0wzvNdbLj9eN2lFvk1bA-BTPw-JJFgHRePlEe17rPh-PH0B2+tLEOpUqwXwjuHKOQEzJXVjjA6SThuLgKgSnLqRxs6cSzhnXOglhqF0gcXRah8prl1mjoKuWNyp13xmtQmTcxpbQtjtLSQQgi0GMKqXIvxgpaD3AjYoDRRA5AgKwRo6B2BdgACSCFoEUKREFGDaHqBAd0SgwDujzEAA}{Open in Shinylive}
    \if{html}{\out{<iframe class="iframe_shinylive" src="https://shinylive.io/r/app/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKcqajGIgEwCu1OAGcMBOhFoFuASgA60snGYFStAG5wABAB4AtDoBmgiOtol2cnQBUsAVQCiSpXSYsOEMaWLUijIoQSvxQpFD6RlzUAPqh4dYhYRGGOgDutKQAFrQQ7PFQuDogSjo67sxs+ajUrIGlOgCCACIAygAykTrRvALCYhJSMtyIiKQwBDFwAB4xUPyi1DoApAB8yw1lMILh5OwAkra2AGKdALwmUOoB7ApgAJp3NmsbEGXvJgEwYeSMoqMZbIxahQehwai3MD7FRkAy2IhwxhwMI6AAKRFQwjCljexxBAHMnkEyi1Gk4uj0+EIROJJLlhtRRuNJjM5qFdC9NiZaNRfuwAITsdhk2wAeQAGgBxLA6M4XACMNgAZDphU5Wk4AGqyi53ACy+3azSeOhVwqwep1OjujUQOmajEE+J04qJQQAvkEAFZEXIxADWcFYonyyRsqX4cGMUGEpBiBH4tFEkx9fsDweA0HgIYKcgAuq4IC0Ol0CsBgDa2u07nmC0XmmTS8ly5WyTW60o0KguvTSLc3joCrLB8lcA0qf1RMOJzT+x9xjF8TF6CwCFkWHHRLQYDU4HOPuVQeDh63yY1oLUt6I7mOBx9psOClNpqQ1JvUHACPuDyPwlndLqYDFtWeBch8ojgp+pDDhBIjqDEogfl+YEHmuvoEGIw6aCwtCgiI8ZZOhYjfj+7zAbepGoSRlFlDaFo3taQEAMK2I09F4IxGquqBd40bRYBYI0TEuBxdyHCcIFFHcrSNMcpwMdJ9iNKxABMdwoT+xI0XIFE0bBUFwPwJ7Max7G6ZR2y8rQu7DscjTtBqGk6FpHw6Shxg8ksFx0KIfZOU+Myvlc76ftRB4FP+xnATeTllPp6gwZB8GIaFsXvGhMiYRc2GMLh9D4RlGEhmlHzkSV6VhXxdF6gpJlsTVolgFxMW8Xx-GCcJtXifJjUyXJkmcUpqnqa12nlW5o0-vF5BGYBzU8W1OiWRoNkXHZDkuJN7wuQeE2UQFL5vghSGVe8EWwABjGkiJ5mkdNiVwSFyFbR8hVZToOV5QVhGZSG11FMhQFOGKUpYLVZIapq4Pqk4YNgHIe1tdNhnDgAcg47TtLdFmxtZIi2fZjkvc5Tk7WUiP3jE0YYdB3lJn5W0HUFyUnWl53wFFDY3Wl90XNNx2pcTZRvVO2U4XhcAEURf1cwDkIihK0rQ5Dyuw0S2N3UlM1RcDitwxrP7LXjl3rUTfFk9tBu-lAz7M09p1lOzl2Vh0LV8bzOj8ylz2LSLWHi-lksiw7B5lULFXlR81Xgyx9W1fNVuUXcHU3Yx3UDdJsk9VJTVDY0algJHJPhxTelayjFzo5jifvEbq06Kbm3m6TKGl2UrBU1ccC0+U9OnUzR3eyHTuc22C1l49D1QQLPttX7Yu5RLUu-cKss6IDCug6rUONRDavw23muPRXV0wzvNdbLj9eN2lFvk1bA-BTPw-JJFgHRePlEe17rPh-PH0B2+tLEOpUqwXwjuHKOQEzJXVjjA6SThuLgKgSnLqRxs6cSzhnXOglhqF0gcXRah8prl1mjoKuWNyp13xmtQmTcxpbQtjtLSQQgi0GMKqXIvxgpaD3AjYoDRRA5AgKwRo6B2BdgACSCFoEUKREFGDaHqBAd0SgwDujzEAA" style="height: 800px; width: 100vw; max-width: 1400px; border: 1px solid rgba(0,0,0,0.175); border-radius: .375rem; position: absolute; left: 50\%; margin-top: 30px; transform: translateX(-50\%); z-index: 1"></iframe>}}
    \if{html}{\out{<a style='height: 800px; display: block;'></a>}}
  }
}
}

