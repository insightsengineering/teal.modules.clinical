% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{srv_decorate_teal_data}
\alias{srv_decorate_teal_data}
\alias{ui_decorate_teal_data}
\title{Wrappers around \code{srv_transform_teal_data} that allows to decorate the data}
\usage{
srv_decorate_teal_data(id, data, decorators, expr, expr_is_reactive = FALSE)

ui_decorate_teal_data(id, decorators, ...)
}
\arguments{
\item{id}{(\code{character(1)}) \code{shiny} module instance id.}

\item{data}{(\code{reactive} returning \code{teal_data})}

\item{expr}{(\code{expression} or \code{reactive}) to evaluate on the output of the decoration.
When an expression it must be inline code. See \code{\link[=within]{within()}}
Default is \code{NULL} which won't evaluate any appending code.}

\item{expr_is_reactive}{(\code{logical(1)}) whether \code{expr} is a reactive expression
that skips defusing the argument.}
}
\description{
Wrappers around \code{srv_transform_teal_data} that allows to decorate the data
}
\details{
\code{srv_decorate_teal_data} is a wrapper around \code{srv_transform_teal_data} that
allows to decorate the data with additional expressions.
When original \code{teal_data} object is in error state, it will show that error
first.

\code{ui_decorate_teal_data} is a wrapper around \code{ui_transform_teal_data}.
}
\keyword{internal}
